{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SelectOption","TodoList","state","searchTitle","selectedTodos","all","randomVisibleTodos","visibleTodo","todos","props","filterBySearch","filter","todo","todoTitle","title","toLowerCase","textSearch","includes","active","completed","sort","Math","random","todoOnList","this","userSelected","selectedUserId","className","htmlFor","type","id","placeholder","value","onChange","event","setState","target","name","Object","values","map","item","onClick","classNames","checked","readOnly","userId","React","Component","request","url","fetch","then","res","ok","Error","status","statusText","json","CurrentUser","user","loadUser","prevProps","a","clearUser","email","phone","App","todoError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.137771e9.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todos';\n\nenum SelectOption {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  userSelected: (userId: number) => void,\n};\n\ntype State = {\n  searchTitle: string,\n  randomVisibleTodos: boolean;\n  selectedTodos: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    searchTitle: '',\n    selectedTodos: SelectOption.all,\n    randomVisibleTodos: false,\n  };\n\n  visibleTodo = () => {\n    const { todos } = this.props;\n    const { searchTitle, selectedTodos, randomVisibleTodos } = this.state;\n\n    let filterBySearch = todos.filter(todo => {\n      const todoTitle = todo.title.toLowerCase();\n      const textSearch = searchTitle.toLowerCase();\n\n      return todoTitle.includes(textSearch);\n    });\n\n    switch (selectedTodos) {\n      case SelectOption.active:\n        filterBySearch = filterBySearch.filter(todo => !todo.completed);\n        break;\n\n      case SelectOption.completed:\n        filterBySearch = filterBySearch.filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    if (randomVisibleTodos) {\n      filterBySearch.sort(() => 0.5 - Math.random());\n    }\n\n    return filterBySearch;\n  };\n\n  render() {\n    const todoOnList = this.visibleTodo();\n    const { userSelected, selectedUserId } = this.props;\n    const { searchTitle, randomVisibleTodos } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label htmlFor=\"search-text\" className=\"TodoList__label\">\n          Search todo\n          <input\n            type=\"text\"\n            id=\"search-text\"\n            className=\"TodoList__label--input\"\n            placeholder=\"Todo title\"\n            value={searchTitle}\n            onChange={(event) => {\n              this.setState({\n                searchTitle: event.target.value,\n              });\n            }}\n          />\n        </label>\n\n        <label htmlFor=\"select-todo\" className=\"TodoList__label\">\n          Select Todo\n          <select\n            name=\"select-todo\"\n            id=\"select-todo\"\n            className=\"TodoList__label--select\"\n            value={this.state.selectedTodos}\n            onChange={(event) => {\n              this.setState({\n                selectedTodos: event.target.value,\n              });\n            }}\n          >\n            {Object.values(SelectOption).map(item => (\n              <option value={item}>{item}</option>\n            ))}\n          </select>\n        </label>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            this.setState(state => ({\n              randomVisibleTodos: !state.randomVisibleTodos,\n            }));\n          }}\n        >\n          {randomVisibleTodos ? 'in order' : 'randomize'}\n        </button>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todoOnList.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n              >\n                <label htmlFor={`todo ${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`todo ${todo.id}`}\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => userSelected(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate.academy/students-api`;\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../types/User';\nimport { getUser } from '../../api/api';\n\ntype State = {\n  user: User | null,\n};\n\ntype Props = {\n  selectedUserId: number,\n  userSelected: (userId: number) => void,\n  clearUser: () => void,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    try {\n      const user = await getUser(this.props.selectedUserId);\n\n      this.setState({ user });\n    } catch (error) {\n      this.props.clearUser();\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              className=\"button CurrentUser__clear\"\n              onClick={() => this.props.clearUser()}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: [],\n  todoError: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    todoError: false,\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch (error) {\n      this.setState({ todoError: true });\n    }\n  }\n\n  userSelected = (userId: number) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({ selectedUserId: userId });\n    }\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      todoError,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todoError ? (\n            <p>Cannot load data from server</p>\n          ) : (\n            <TodoList\n              todos={todos}\n              userSelected={this.userSelected}\n              selectedUserId={selectedUserId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userSelected={this.userSelected}\n                selectedUserId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected or user is missing from the database'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}